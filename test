#!/bin/bash
# Tests for Ezhil language
# (C) 2007, 2008, 2013-2015 முத்தையா அண்ணாமலை

if [ -e success.txt ];
then
    rm success.txt
fi
if [ -e failed.txt ];
then
    rm failed.txt
fi
if [ -e dump_file ];
then
    rm dump_file
fi

touch success.txt
touch failed.txt
touch dump_file

## run all the success programs
for i in `ls ./tests/exprs/*.prog | sort`;
do
    echo "########## Testing file $i" | tee -a dump_file
    python ./ezhil/exprs.py $i $1 2>&1 >> dump_file
    if [ $? -eq 0 ]
    then
	echo $i >> success.txt
    else
	echo $i >> failed.txt
    fi
    sleep 0
done

# run tests for Ezhil as well
cd ./tests
# last space important before the \
for i in `echo gigo.n lisp0.n oklex.n badlex.n hello.n fact.n ranges.n gcd.n printtest.n vannakm.n temple.n lex2.n\
 ifchain.n fern.n கூட்டு.n strings.n tables.n calc_asmd.n list.n \
string_demo.n list_ta.n yinyang.n unaryop.n boolean.n chaos.n \
prime.n array1.n array2.n filedemo.n filerw.n reverse.n friends.n  \
palindromes.n ford2.n trials.n fornested.n loopupdate.n foreach.n foriter.n \
dowhile.n select_case2.n magic_coins.n rich_poor.n peanut_candy.n logical_not.n \
binary.n fibo.n floatpthole.n ifnested.n hailstone.n split_text.n lcmgcd.n \
windoze.n convert2kelvin.n dict.n speedoflight.n tictok.n \
change.n solo_return.n listmt.n predicates.n sexpr.n dict_ta.n \
fruity.n optional.n sine_qua_non.n armstrong.n array0.n array_nd.n \
tamil_letters.n tamil_months.n tower_of_hanoi.n hanoi.n \
max_wo_compare.n powers_of_two.n sum_of_digits.n bmi.n isbalanced.n mangalyaan.n \
boolf.n globalvars.n tamil1.n tamil2.n tamil_tha.n \
ta_strings.n \
array_wr.n \
find.n \
math_arithprogression.n \
math_geomprogression.n \
math_harmonicseries.n \
math_complex.n \
math_goldenratio.n \
math_horner.n \
dict_rw.n \
ml.n \
beer_bottles_song.n \
sort.n \
bitwiseops.n \
mathipeedu.n \
staircase_light.n \
boolean_fcns.n \
boolean_demorgan.n \
nonexistent_file.n \
half_adder.n \
full_adder.n \
eval0.n \
eval1.n \
ta_sort.n \
neuron.n varavu_selavu.n calc2.n name_var.n py1.n demoif.n morse.n partition_estimate.n | sort`
do
    echo "########## Testing Ezhil script $i $1" | tee -a ../dump_file    
    python ../ezhil/ezhil.py  $i $1 2>&1 >> ../dump_file
    if [ $? -eq 0 ]
    then
       echo $i >> ../success.txt
    else
       echo $i >> ../failed.txt
    fi
    sleep 0
done

echo "**********Special TSCII Test**********"
    python ../ezhil/ezhil.py  -tamilencoding tscii  tscii_calc2.n |  tee -a ../dump_file
	if [ $? -eq 0 ]
	then
	    echo "tscii_calc2.n" >> ../success.txt
	else
	    echo "tscii_calc2.n" >> ../failed.txt
	fi
echo "********************************************"

if [ -e names.txt ];
then
    rm names.txt
fi

cd ../

echo "**************************************************"
echo " Running Web tests" | tee -a dump_file
echo "**************************************************"
# this test needs Ezhil to be installed via pip
python ./web/ezhil_web.py 2>&1 >> dump_file
if [ $? -eq 0 ]
then
    echo "ezhil_web.py" >> success.txt
else
    echo "ezhil_web.py" >> failed.txt
fi

echo "**************************************************"
echo " Running interactive tests " | tee -a dump_file
echo "***************************************************"
for i in `echo demos/ch2.n \
`
do
    echo "ezhil" | python ./ezhil/ezhil.py ./tests/$i  >>  dump_file
    if [ $? -eq 0 ]
    then
	echo "passed ezhil interactive test for  $i" >> success.txt
    else
	echo "failed ezhil interactive test for $i" >> failed.txt
    fi
done

echo "**************************************************"
echo " Running all the failure programs, that must fail."
echo "**************************************************"
for i in `ls ./tests/*.fprog`;
do
    echo "Testing file $i" | tee -a dump_file
    python ./ezhil/exprs.py $i $1 -stacksize 10 2>&1 >> dump_file
    if [ $? -eq 0 ]
    then
	echo $i >> failed.txt
    else
	echo $i >> success.txt
    fi
    sleep 0
done

echo "**********Successful Tests**********" 
cat success.txt
echo "*************************************"
echo "***********Failed Tests**************" 
cat failed.txt

echo "***********Summary******************"
echo "Passed = "`wc -l success.txt`", Failed = "`wc -l failed.txt`

# number of failures is always limited, and when you add
# failed tests you have to bump this up.

# Known $NFAIL failures
# ./tests/exprs/arraysum.prog
# ./tests/exprs/condtest.prog
# ./tests/exprs/dim2d_array.prog
# ./tests/exprs/ifelseif.prog
# badlex.n
# temple.n
# solo_return.n
# boolf.n
# nonexistent_file.n
# eval1.n
# yinyang.n -- fails b/c of no X-window
NFAIL=13 #11/20/15
TOTFAIL=`wc -l failed.txt | cut -d'f' -f1`
echo "from sys import exit; ( $TOTFAIL <=  $NFAIL ) and exit(0) or exit(255)" | python
if [ $?  -eq 0 ]
then
   echo "########## Expected failures" | tee -a dump_file
   exitcode=0 # success
else
   echo "Expecting $NFAIL failures, but found $TOTFAIL failures" | tee -a dump_file
   echo "Too few/many failures; some negative tests may have failed" | tee -a dump_file
   echo "" | tee -a dump_file
   echo "######### LIST OF FAILED FILES ##############" | tee -a dump_file
   cat failed.txt | tee -a dump_file
   echo " " | tee -a dump_file
   exitcode=255 #failed failures != $NFAIL
   exit $exitcode
fi

# cleanup
rm failed.txt
rm success.txt
exit $exitcode
